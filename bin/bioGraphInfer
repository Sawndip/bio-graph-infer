#!/usr/bin/env	python2.7

import os, sys
from subprocess import call
sys.path.append(sys.path[0]+"/../lib")

from optparse import OptionParser
parser = OptionParser()
parser.add_option("--pathway",dest="pathway",action="store",default=None)
parser.add_option("--obs",dest="obs",action="store",default=None)
parser.add_option("--output",dest="output",action="store",default=None)
parser.add_option("--libdaiBIN",dest="bin",action="store",default=None)
(opts, args) = parser.parse_args()

from factor import *
from graph import *

fg = Graph(opts.pathway)
obs = Obs(opts.obs)
# add observation nodes
fg.addObs(obs)
fg.buildFactors()
fg.printFactors(opts.output+"/input.fg")
fg.printEM(opts.output+"/input.em")

#for tuple in fg.graph:
#	print fg.nodeID2Name(tuple[0])+"\t"+fg.nodeID2Name(tuple[1])+"\t"+str(fg.getMI(tuple))

# read observations

fg.printOBS(opts.output+"/input.tab")
# run the libDAI code to do EM 
print("Running EM...")
output = call("cd "+opts.output+" && "+"../"+opts.bin+" > learned.fg", shell=True)
fh = open(opts.output+"/learned.fg", 'r')

# seek ahead to the learned factor graph
while True:
	line = fh.readline()

	if line.startswith("Learned factor graph:"):
		c = fh.readline()
		numFactors = fh.readline()
		ss = fh.readline()
		break

	if line == "":
		raise Exception("Error: couldn't parse learned factor graph")
	
# parse learned factor graph			
#test = open('testout','w')
#for factor in Factor.readFactors(fh):
#	fg.factors[factor.getID()] = factor
#test.close()

print "---"

for tuple in fg.graph:
	print fg.nodeID2Name(tuple[0])+"\t"+fg.nodeID2Name(tuple[1])+"\t"+str(fg.getMI(tuple))

